=== simple_var.sck
(def x 2)
(// (// 16 2) 2)
> 4
(// (// 16 x) x)
> 4
(def (incr x) (+ x 1))
(def y 3)
(incr y)
> 4
PASSED simple_var.sck
=== recursion.sck
(def (fib n) (cond [(<= n 1) 1] else (+ (fib (- n 1)) (fib (- n 2)))))
(def (square n) (cond [(<= n 0) 0] else (+ (- (* 2 n) 1) (square (- n 1)))))
(def tea 24)
(fib 1)
> 1
(fib 2)
> 2
(fib 3)
> 3
(fib 4)
> 5
(fib 5)
> 8
(fib 6)
> 13
(fib 7)
> 21
(fib 8)
> 34
(square 0)
> 0
(square 1)
> 1
(square 2)
> 4
(square 3)
> 9
(square 4)
> 16
(square 5)
> 25
(square 6)
> 36
(square 7)
> 49
(square 8)
> 64
(square tea)
> 576
PASSED recursion.sck
=== closures.sck
(def (add-1 x) (+ x 1))
(add-1 1)
> 2
(def (add-n y) (lambda (x) (+ (* x x) y)))
(def (add-5 x) ((add-n 5) x))
(add-5 10)
> 105
(def (make-multiplier x) (lambda (y) (* x y)))
(def (times2 x) ((make-multiplier 2) x))
(times2 5)
> 10
(def times22 (make-multiplier 2))
(times22 5)
> 10
((lambda (y) (* y y)) 5)
> 25
(((lambda (x) (lambda (y) (* (* x x) y))) 4) 5)
> 80
((lambda (x) (lambda (y) (* (* x x) y))) 4)
> Closure(params = ['y'], body = Call(func=Var(name='*'), args=[Call(func=Var(name='*'), args=[Var(name='x'), Var(name='x')]), Var(name='y')]), env = {'add-n', 'make-multiplier', 'add-1', 'times22', 'x', 'times2', '$1', 'add-5'})
($1 5)
> 80
PASSED closures.sck
=== parses.sck
(def x 2)
(def pi 3.14)
(def mood "happyyy")
(def (sq x) (* x x))
(def (incr x) (+ x 1))
(sq x)
> 4
(sq pi)
> 9.8596
(cond [(= x 2) 4] else 5)
> 4
(cond [(= (incr x) 2) 4] else 5)
> 5
(cond [(= x 3) 1])
PASSED parses.sck
=== add.sck
(+ 1 1)
> 2
(+ (+ 1 3) (- 3 2))
> 5
(* 2 4 5)
> 40
PASSED add.sck
=== funcs.sck
(((lambda (x) (lambda (y) (* (* x x) y))) 4) 5)
> 80
(def (sq-mult x) (lambda (y) (* (* x x) y)))
((sq-mult 4) 5)
> 80
PASSED funcs.sck
=== SUMMARY
simple_var.sck PASSED.
recursion.sck PASSED.
closures.sck PASSED.
parses.sck PASSED.
add.sck PASSED.
funcs.sck PASSED.
